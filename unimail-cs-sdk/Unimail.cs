using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace UnimailCsSdk
{
    public class UnimailError
    {
        public bool IsError { get; }
        public string Msg { get; }

        public UnimailError(bool isError, string msg)
        {
            this.IsError = isError;
            this.Msg = msg;
        }
    }

    internal class UnimailReturn
    {
        public int Code { get; set; }
        public string Msg { get; set; }
    }

    public class UnimailParam
    {
        public string Host { get; }
        public string Key { get; }

        public UnimailParam(string key, string host)
        {
            this.Host = host;
            this.Key = key;
        }
    }

    public class Factory
    {
        /// <summary>
        /// 生成 UnimailClient 客户端
        /// </summary>
        /// <param name="key">申请的秘钥</param>
        /// <returns>UnimailClient</returns>
        public static UnimailClient New(string key)
        { return new unimailClient(key); }

        /// <summary>
        /// 生成 UnimailClient 客户端
        /// </summary>
        /// <param name="param"></param>
        /// <returns>UnimailClient</returns>
        public static UnimailClient New(UnimailParam param)
        {
            return new unimailClient(param.Key, param.Host);
        }
    }

    /// <summary>
    /// unimail client. generated by Factory.New
    /// </summary>
    public interface UnimailClient
    {
        /// <summary>
        /// set return msg language, default is en. support language has en, zh, vi, th, gu, id
        /// </summary>
        /// <param name="lang">will be set language</param>
        /// <returns></returns>
        UnimailError SetLanguage(string lang);

        Task<Boolean> CheckConnection();

        Task<UnimailError> SendEmail(string receiver, string subject, string content);

        Task<UnimailError> BatchSendEmail(List<string> receivers, string subject, string content);
    }

    internal class unimailClient : UnimailClient
    {
        public string Host { set; get; }
        public string Key { set; get; }
        private string lang = "zh";
        private HttpClient client = new HttpClient();

        private List<string> supportLang = new List<string>()
        {
            "en", "zh","vi", "th", "gu", "id"
        };

        public unimailClient(string key, string host = "https://unimail-back.allcloud.top")
        {
            this.Key = key;
            this.Host = host;
        }

        public UnimailError SetLanguage(string lang)
        {
            if (!supportLang.Contains(lang))
            {
                return new UnimailError(true, $"unimail: language not support, your language is {lang}, support lang is: {string.Join(",", supportLang)}");
            }
            this.lang = lang;
            return new UnimailError(false, null);
        }

        public async Task<Boolean> CheckConnection()
        {
            try
            {
                var data = JsonSerializer.Serialize(new
                {
                    authorization = this.Key
                });
                var req = new HttpRequestMessage(HttpMethod.Post, this.Host + "/api/email/checkConnection");
                // 设置 Accept-Language 头
                req.Headers.Add("Accept-Language", this.lang);
                req.Content = new StringContent(data, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.SendAsync(req);
                string responseBody = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    return false;
                }
                string responseData = await response.Content.ReadAsStringAsync();
                var unimailReturn = JsonSerializer.Deserialize<UnimailReturn>(responseData);
                return unimailReturn.Code == 0;
            } catch (HttpRequestException e)
            {
                return false;
            }
        }

        /// <summary>
        /// Send email
        /// </summary>
        /// <param name="receiver"></param>
        /// <param name="subject">email title</param>
        /// <param name="content">email content</param>
        public async Task<UnimailError> SendEmail(string receiver, string subject, string content)
        {
            try
            {
                var data = JsonSerializer.Serialize(new
                {
                    authorization = this.Key,
                    receiver = receiver,
                    title = subject,
                    content = content
                });
                var req = new HttpRequestMessage(HttpMethod.Post, this.Host + "/api/email/sendEmail");
                // 设置 Accept-Language 头
                req.Headers.Add("Accept-Language", this.lang);
                req.Content = new StringContent(data, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.SendAsync(req);
                string responseBody = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    return new UnimailError(false, "unimail network error");
                }
                string responseData = await response.Content.ReadAsStringAsync();
                var unimailReturn = JsonSerializer.Deserialize<UnimailReturn>(responseData);
                return new UnimailError(unimailReturn.Code != 0, unimailReturn.Msg);
            } catch (HttpRequestException e)
            {
                return new UnimailError(false, "unimail network error");
            }
        }

        public async Task<UnimailError> BatchSendEmail(List<string> receivers, string subject, string content)
        {
            try
            {
                var data = JsonSerializer.Serialize(new
                {
                    authorization = this.Key,
                    receivers = receivers,
                    title = subject,
                    content = content
                });
                var req = new HttpRequestMessage(HttpMethod.Post, this.Host + "/api/email/batchSendEmail");
                // 设置 Accept-Language 头
                req.Headers.Add("Accept-Language", this.lang);
                req.Content = new StringContent(data, Encoding.UTF8, "application/json");

                HttpResponseMessage response = await client.SendAsync(req);
                string responseBody = await response.Content.ReadAsStringAsync();
                if (!response.IsSuccessStatusCode)
                {
                    return new UnimailError(false, "unimail network error");
                }
                string responseData = await response.Content.ReadAsStringAsync();
                var unimailReturn = JsonSerializer.Deserialize<UnimailReturn>(responseData);
                return new UnimailError(unimailReturn.Code != 0, unimailReturn.Msg);
            } catch (HttpRequestException e)
            {
                return new UnimailError(false, "unimail network error");
            }
        }
    }
}